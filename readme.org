* About
The research in the area of music classification, especially music genre recognition, has been going on for years. Throughout history, there have been different music eras including: Medieval, Renaissance, Baroque, Classical, Romantic etc. The style of music composition in each era is different depending on the elements used, such as the music texture (Polyphony, Homophony), harmony, orchestration, and phrasing, which makes classification possible. This project focuses on an understudied domain of music era classification and an application that helps users determine the era of a specified piece of music.
* Getting Started (tested on M1 Mac and Ubuntu 20.04)
** Install Docker, Minikube, and Docker
*** Mac
1) Install development packages on Mac using ~xcode-select --install~
2) Install Docker, use [[https://www.docker.com/products/docker-desktop][Docker Desktop]], launch and configure resource CPU to at least 4 and Memory to at least 8GB
3) Install Minikube, use ~brew install minikube~ or follow [[https://minikube.sigs.k8s.io/docs/start/][the official guide]]
*** Linux
1) Run ~./install_prereq_linux.sh~ in ./k8s directory to install Docker, Minikube, and Kubectl
** Build and Deploy App
1) Run ~./build_app.sh~ in ./k8s directory: it will start a minikube cluster and build all images within
2) Run ~./deploy_app.sh~ in ./k8s directory: it will deploy app inside k8s cluster
3) Wait for a few minutes for Cassandra to start up, then run ~./init_db.sh~ to create keyspace and tables.
4) Run ~./start_dev.sh~ in ./k8s directory to spin up dashboard and tunnel to start developing!
* Team Info
| Member          | Email                    |
|-----------------+--------------------------|
| Kin Wo Chang    | kinwo.chang@sjsu.edu     |
| Puneet Tokhi    | puneet.tokhi@sjsu.edu    |
| Ramin Mousivand | ramin.mousivand@sjsu.edu |
| Xin Yu Li       | xinyu.li@sjsu.edu        |
* Resources
** REST API Server
- Using Django Rest Framework: [[https://www.ginkgobioworks.com/2021/02/04/creating-a-rest-api-using-django-rest-framework/][blog on Ginkgo Bioworks]]
- Connect to Mongodb using Pymongo and MongoEngine as ORM layer on top of it: [[https://www.mongodb.com/compatibility/mongodb-and-django][Mongodb official site]]

** Kubernetes
- Service, Deployment, and Pods explain: [[https://octopus.com/docs/deployments/kubernetes/deploy-container][Octopus Deploy]]
** Frontend
- [[https://blog.logrocket.com/complete-guide-react-native-web/][LogRocket: React Native for Web]]
- [[https://rsbh.dev/blog/dockerize-react-app][Rishabh Mishra: Dockerizing a React.js app for deployment]]
** Database
- [[https://kubernetes.io/blog/2017/01/running-mongodb-on-kubernetes-with-statefulsets/][Kubernetes Blog: Running MongoDB on Kubernetes with StatefulSets]]
- Mongodb deployment on k8s using PVC: [[https://devopscube.com/deploy-mongodb-kubernetes/][devopscube]]
